{"version":3,"sources":["pages/MoviesPage.jsx"],"names":["override","css","KEY","MoviesPage","useState","movies","setMovies","query","setQuery","error","setError","loading","setLoading","color","setColor","history","useHistory","location","useLocation","useEffect","state","searchQuery","axios","get","then","response","data","results","catch","message","finally","setHistory","push","search","searchMovies","onSubmit","e","preventDefault","type","value","onChange","currentTarget","trim","className","onClick","input","target","placeholder","size","map","movie","to","pathname","id","from","title","defaults","baseURL"],"mappings":"oRAOMA,EAAWC,cAAH,8HAQRC,EAAM,mCAGG,SAASC,IACtB,MAA4BC,mBAAS,IAArC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAA0BF,mBAAS,IAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAA0BJ,mBAAS,MAAnC,mBAAOK,EAAP,KAAcC,EAAd,KAGA,EAA4BN,oBAAS,GAArC,mBAAKO,EAAL,KAAcC,EAAd,KACA,EAAwBR,mBAAS,WAAjC,mBAAKS,EAAL,KAAYC,EAAZ,KAGIC,EAAUC,cACVC,EAAWC,cAEfC,qBAAU,WAER,GADAP,GAAW,GACPK,EAASG,OAASH,EAASG,MAAMC,YAAa,CAChDb,EAASS,EAASG,MAAMC,aAExB,IAAMd,EAAQU,EAASG,MAAMC,YAC7BC,IACGC,IADH,kCACkCrB,EADlC,kBAC+CK,IAC5CiB,MAAK,SAAAC,GACJnB,EAAUmB,EAASC,KAAKC,YAEzBC,OAAM,SAAAnB,GAAK,OAAIC,EAASD,EAAMoB,YAC9BC,SAAQ,kBAAMlB,GAAW,SAE7B,CAACK,EAASG,QAEb,IAWMW,EAAa,WACjBhB,EAAQiB,KAAK,CACXC,OAAO,SAAD,OAAW1B,GACjBa,MAAO,CAAEC,YAAY,GAAD,OAAKd,OAIvB2B,EAAe,WACnB,OAAOZ,IACJC,IADI,kCAC2BrB,EAD3B,kBACwCK,IAC5CiB,MAAK,SAAAC,GACJnB,EAAUmB,EAASC,KAAKC,aAI9B,OACE,qCACE,uBAAMQ,SA1BW,SAAAC,GACnBA,EAAEC,iBACFH,IAEAH,IAEAvB,EAAS,KAoBP,UACE,uBAAO8B,KAAK,OAAOC,MAAOhC,EAAOiC,SA7BlB,SAAAJ,GAAC,OAAI5B,EAAS4B,EAAEK,cAAcF,MAAMG,WA8BnD,wBAAQJ,KAAK,SAAb,uBAGD7B,GAAS,0DAEV,6BACGE,EAEC,sBAAKgC,UAAU,gBAAf,UACE,wBAAQC,QAAS,kBAAMhC,GAAYD,IAAnC,2BACA,uBACE4B,MAAO1B,EACP2B,SAAU,SAAAK,GAAK,OAAI/B,EAAS+B,EAAMC,OAAOP,QACzCQ,YAAY,wBAGd,cAAC,IAAD,CACElC,MAAOA,EACPF,QAASA,EACTV,IAAKD,EACLgD,KAAM,SAIV3C,EAAO4C,KAAI,SAAAC,GAAK,OACd,6BACE,cAAC,IAAD,CACEC,GAAI,CACFC,SAAS,WAAD,OAAaF,EAAMG,IAC3BjC,MAAO,CAAEkC,KAAMrC,IAHnB,SAMGiC,EAAMK,SAPFL,EAAMG,YAtF3B/B,IAAMkC,SAASC,QAAU","file":"static/js/movies-page.696f0a15.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { Link, useHistory, useLocation } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\n// from 'react-spinners'\r\nimport { css } from '@emotion/react';\r\nimport ClipLoader from 'react-spinners/ClipLoader';\r\nconst override = css`\r\n  width: 150px;\r\n  height: 150px;\r\n  display: block;\r\n  margin: 0 auto;\r\n  border-color: orange;\r\n`;\r\n\r\nconst KEY = 'b623cf494fc852caec180044c42a9501';\r\naxios.defaults.baseURL = 'https://api.themoviedb.org';\r\n\r\nexport default function MoviesPage() {\r\n  const [movies, setMovies] = useState([]);\r\n  const [query, setQuery] = useState('');\r\n  const [error, setError] = useState(null);\r\n\r\n  // from 'react-spinners'\r\n  let [loading, setLoading] = useState(true);\r\n  let [color, setColor] = useState('#2a2a2a');\r\n  // --- --- ---- --- ----\r\n\r\n  let history = useHistory();\r\n  let location = useLocation();\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    if (location.state && location.state.searchQuery) {\r\n      setQuery(location.state.searchQuery);\r\n\r\n      const query = location.state.searchQuery;\r\n      axios\r\n        .get(`/3/search/movie?api_key=${KEY}&query=${query}`)\r\n        .then(response => {\r\n          setMovies(response.data.results);\r\n        })\r\n        .catch(error => setError(error.message))\r\n        .finally(() => setLoading(false));\r\n    }\r\n  }, [location.state]);\r\n\r\n  const handleChange = e => setQuery(e.currentTarget.value.trim());\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    searchMovies();\r\n\r\n    setHistory();\r\n\r\n    setQuery('');\r\n  };\r\n\r\n  const setHistory = () => {\r\n    history.push({\r\n      search: `query=${query}`,\r\n      state: { searchQuery: `${query}` },\r\n    });\r\n  };\r\n\r\n  const searchMovies = () => {\r\n    return axios\r\n      .get(`/3/search/movie?api_key=${KEY}&query=${query}`)\r\n      .then(response => {\r\n        setMovies(response.data.results);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={handleSubmit}>\r\n        <input type=\"text\" value={query} onChange={handleChange}></input>\r\n        <button type=\"submit\">Search</button>\r\n      </form>\r\n\r\n      {error && <div>We catch some error !!!</div>}\r\n\r\n      <ul>\r\n        {loading ? (\r\n          // from 'react-spinners'\r\n          <div className=\"sweet-loading\">\r\n            <button onClick={() => setLoading(!loading)}>Toggle Loader</button>\r\n            <input\r\n              value={color}\r\n              onChange={input => setColor(input.target.value)}\r\n              placeholder=\"Color of the loader\"\r\n            />\r\n\r\n            <ClipLoader\r\n              color={color}\r\n              loading={loading}\r\n              css={override}\r\n              size={150}\r\n            />\r\n          </div>\r\n        ) : (\r\n          movies.map(movie => (\r\n            <li key={movie.id}>\r\n              <Link\r\n                to={{\r\n                  pathname: `/movies/${movie.id}`,\r\n                  state: { from: location },\r\n                }}\r\n              >\r\n                {movie.title}\r\n              </Link>\r\n            </li>\r\n          ))\r\n        )}\r\n      </ul>\r\n    </>\r\n  );\r\n}\r\n\r\n// class MoviesPage extends Component {\r\n//   state = {\r\n//     movies: [],\r\n//     query: '',\r\n//   };\r\n\r\n//   componentDidMount() {\r\n//     if (this.props.location.state && this.props.location.state.searchQuery) {\r\n//       this.setState({ query: this.props.location.state.searchQuery });\r\n\r\n//       const query = this.props.location.state.searchQuery;\r\n//       axios\r\n//         .get(`/3/search/movie?api_key=${KEY}&query=${query}`)\r\n//         .then(response => {\r\n//           this.setState({ movies: response.data.results });\r\n//         });\r\n//     }\r\n//   }\r\n\r\n//   handleChange = e => {\r\n//     this.setState({ query: e.currentTarget.value.trim() });\r\n//   };\r\n\r\n//   handleSubmit = e => {\r\n//     e.preventDefault();\r\n//     this.searchMovies();\r\n//     //\r\n//     this.setHistory();\r\n//     //\r\n//     this.setState({ query: '' });\r\n//   };\r\n\r\n//   setHistory = () => {\r\n//     const { query } = this.state;\r\n//     this.props.history.push({\r\n//       search: `query=${query}`,\r\n//       state: { searchQuery: `${query}` },\r\n//     });\r\n//   };\r\n\r\n//   searchMovies = () => {\r\n//     const { query } = this.state;\r\n//     return axios\r\n//       .get(`/3/search/movie?api_key=${KEY}&query=${query}`)\r\n//       .then(response => {\r\n//         this.setState({ movies: response.data.results });\r\n//       });\r\n//   };\r\n\r\n//   render() {\r\n//     return (\r\n//       <>\r\n//         <form onSubmit={this.handleSubmit}>\r\n//           <input\r\n//             type=\"text\"\r\n//             value={this.state.query}\r\n//             onChange={this.handleChange}\r\n//           ></input>\r\n//           <button type=\"submit\">Search</button>\r\n//         </form>\r\n\r\n//         <ul>\r\n//           {this.state.movies.map(movie => (\r\n//             <li key={movie.id}>\r\n//               <Link\r\n//                 to={{\r\n//                   pathname: `/movies/${movie.id}`,\r\n//                   state: { from: this.props.location },\r\n//                 }}\r\n//               >\r\n//                 {movie.title}\r\n//               </Link>\r\n//             </li>\r\n//           ))}\r\n//         </ul>\r\n//       </>\r\n//     );\r\n//   }\r\n// }\r\n// export default MoviesPage;\r\n"],"sourceRoot":""}